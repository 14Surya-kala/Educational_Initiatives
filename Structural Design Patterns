#Structural Design Patterns
#1)Adapter Pattern: Legacy System Integration
class LegacyReporter:
    def generate_report(self, data):
        return f"Legacy Report: {data}"

class ModernAnalytics:
    def process_data(self, data):
        return f"Modern Analytics: {data}"

class ReporterAdapter:
    def __init__(self, legacy_reporter):
        self.legacy_reporter = legacy_reporter

    def process_data(self, data):
        legacy_format = self.legacy_reporter.generate_report(data)
        return f"Adapted: {legacy_format}"

# Usage
legacy = LegacyReporter()
adapter = ReporterAdapter(legacy)
modern = ModernAnalytics()

print(adapter.process_data("Sales Q1"))  # Adapted: Legacy Report: Sales Q1
print(modern.process_data("Sales Q1"))   # Modern Analytics: Sales Q1

#2)Decorator Pattern: Coffee Customization
class Coffee:
    def cost(self):
        return 5
    def description(self):
        return "Simple Coffee"

class MilkDecorator:
    def __init__(self, coffee):
        self._coffee = coffee

    def cost(self):
        return self._coffee.cost() + 1

    def description(self):
        return self._coffee.description() + ", Milk"

class SugarDecorator:
    def __init__(self, coffee):
        self._coffee = coffee

    def cost(self):
        return self._coffee.cost() + 0.5

    def description(self):
        return self._coffee.description() + ", Sugar"

# Usage
coffee = Coffee()
print(f"{coffee.description()}: ${coffee.cost()}")  # Simple Coffee: $5

coffee_with_milk = MilkDecorator(coffee)
print(f"{coffee_with_milk.description()}: ${coffee_with_milk.cost()}")  # Simple Coffee, Milk: $6

coffee_with_milk_sugar = SugarDecorator(coffee_with_milk)
print(f"{coffee_with_milk_sugar.description()}: ${coffee_with_milk_sugar.cost()}")  # Simple Coffee, Milk, Sugar: $6.5
