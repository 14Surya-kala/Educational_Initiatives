#Creational Design Patterns
#1)Singleton Pattern: Logger Configuration
class Logger:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.log_file = "app.log"
        return cls._instance

    def log(self, message):
        with open(self.log_file, "a") as f:
            f.write(f"{message}\n")

# Usage
logger1 = Logger()
logger2 = Logger()
print(logger1 is logger2)  # True (same instance)

logger1.log("Error 404")
logger2.log("User logged in")
# Both write to "app.log"

#2)Factory Method Pattern: Vehicle Manufacturing
from abc import ABC, abstractmethod

class Vehicle(ABC):
    @abstractmethod
    def drive(self):
        pass

class Car(Vehicle):
    def drive(self):
        print("Driving a car")

class Truck(Vehicle):
    def drive(self):
        print("Driving a truck")

class VehicleFactory:
    @staticmethod
    def create_vehicle(vehicle_type):
        if vehicle_type == "car":
            return Car()
        elif vehicle_type == "truck":
            return Truck()
        return None

# Usage
factory = VehicleFactory()
car = factory.create_vehicle("car")
truck = factory.create_vehicle("truck")
car.drive()    # Driving a car
truck.drive()  # Driving a truck
